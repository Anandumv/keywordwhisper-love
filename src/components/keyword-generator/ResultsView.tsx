
import { useState } from 'react';
import { motion } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Check, Copy, Download, Loader2, MessageSquare, Printer, RefreshCw } from 'lucide-react';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { sendSEOContentViaWhatsApp } from '@/api/whatsapp';

import ResultsHeader from './ResultsHeader';
import ResultKeywords from './ResultKeywords';
import ResultProductDescription from './ResultProductDescription';
import ResultFeatureSections from './ResultFeatureSections';
import ResultCompetitorAnalysis from './ResultCompetitorAnalysis';
import ResultContentIdeas from './ResultContentIdeas';

interface ResultsViewProps {
  seoContent: any;
  copied: string | null;
  handleCopy: (text: string, section: string) => void;
  handleReset: () => void;
  phoneNumber: string;
  onPhoneNumberChange: (number: string) => void;
  isSendingWhatsApp: boolean;
  onSendingWhatsAppChange: (sending: boolean) => void;
  whatsAppSuccess: boolean | null;
  onWhatsAppStatusChange: (success: boolean | null) => void;
}

const ResultsView = ({
  seoContent,
  copied,
  handleCopy,
  handleReset,
  phoneNumber,
  onPhoneNumberChange,
  isSendingWhatsApp,
  onSendingWhatsAppChange,
  whatsAppSuccess,
  onWhatsAppStatusChange
}: ResultsViewProps) => {

  const handlePrint = () => {
    window.print();
  };

  const handleDownload = () => {
    if (!seoContent) return;
    
    const content = `
SEO Content Generated

Title: ${seoContent.seoTitle}

Meta Description: ${seoContent.metaDescription}

Keywords: ${seoContent.keywords.join(', ')}

Product Description: ${seoContent.productDescription}

Long-tail Keywords: ${seoContent.longTailKeywords.join(', ')}

Product Features:
${seoContent.productFeatures.map((feature: string) => `• ${feature}`).join('\n')}

Target Audience:
${seoContent.targetAudience.map((audience: string) => `• ${audience}`).join('\n')}

SEO Recommendations:
${seoContent.seoRecommendations.map((rec: string) => `• ${rec}`).join('\n')}

Competitor Analysis:
${seoContent.competitorAnalysis}

Content Ideas:
${seoContent.contentIdeas.map((idea: string) => `• ${idea}`).join('\n')}

Generated by Trend Whisper SEO Generator
    `.trim();
    
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'seo-content.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleSendWhatsApp = async () => {
    if (!phoneNumber.trim() || !seoContent) return;
    
    onSendingWhatsAppChange(true);
    onWhatsAppStatusChange(null);
    
    try {
      const success = await sendSEOContentViaWhatsApp(phoneNumber, seoContent);
      onWhatsAppStatusChange(success);
    } catch (error) {
      console.error('Error sending WhatsApp message:', error);
      onWhatsAppStatusChange(false);
    } finally {
      onSendingWhatsAppChange(false);
    }
  };

  return (
    <motion.div 
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.3 }}
      className="space-y-8"
    >
      <ResultsHeader 
        handleReset={handleReset}
        handleDownload={handleDownload}
        handlePrint={handlePrint}
      />

      <ScrollArea className="h-[calc(100vh-400px)] pr-4">
        <div className="space-y-8">
          {/* Title and Meta Description cards */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card className="border border-white/30 shadow-xl hover:shadow-2xl transition-all duration-300 bg-gradient-to-br from-indigo-950/90 to-indigo-900/80 backdrop-blur-sm overflow-hidden group">
              <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-indigo-500 to-transparent opacity-0 group-hover:opacity-100 transition-opacity"></div>
              <CardHeader className="pb-2 bg-gradient-to-r from-indigo-500/50 to-transparent">
                <div className="flex items-center gap-2">
                  <div className="p-1.5 bg-indigo-500/50 rounded-md">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-4 w-4 text-indigo-300">
                      <path d="M12 22V8"></path>
                      <path d="m2 10 10-8 10 8"></path>
                      <path d="M18 22V18a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2v4"></path>
                    </svg>
                  </div>
                  <CardTitle className="text-lg text-white font-bold">Title</CardTitle>
                </div>
              </CardHeader>
              <CardContent className="pt-4">
                <div className="flex justify-between items-start">
                  <p className="text-base text-white font-medium">{seoContent.seoTitle}</p>
                  <Button 
                    variant="ghost" 
                    size="icon" 
                    className="h-6 w-6 hover:bg-indigo-900/80 transition-colors text-white rounded-full"
                    onClick={() => handleCopy(seoContent.seoTitle, 'title')}
                  >
                    {copied === 'title' ? <Check className="h-4 w-4 text-green-400" /> : <Copy className="h-4 w-4" />}
                  </Button>
                </div>
              </CardContent>
            </Card>

            <Card className="border border-white/30 shadow-xl hover:shadow-2xl transition-all duration-300 bg-gradient-to-br from-purple-950/90 to-purple-900/80 backdrop-blur-sm overflow-hidden group">
              <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-purple-500 to-transparent opacity-0 group-hover:opacity-100 transition-opacity"></div>
              <CardHeader className="pb-2 bg-gradient-to-r from-purple-500/50 to-transparent">
                <div className="flex items-center gap-2">
                  <div className="p-1.5 bg-purple-500/50 rounded-md">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-4 w-4 text-purple-300">
                      <path d="M12 22V8"></path>
                      <path d="m2 10 10-8 10 8"></path>
                      <path d="M18 22V18a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2v4"></path>
                    </svg>
                  </div>
                  <CardTitle className="text-lg text-white font-bold">Meta Description</CardTitle>
                </div>
              </CardHeader>
              <CardContent className="pt-4">
                <div className="flex justify-between items-start">
                  <p className="text-base text-white font-medium">{seoContent.metaDescription}</p>
                  <Button 
                    variant="ghost" 
                    size="icon" 
                    className="h-6 w-6 hover:bg-purple-900/80 transition-colors text-white rounded-full"
                    onClick={() => handleCopy(seoContent.metaDescription, 'meta')}
                  >
                    {copied === 'meta' ? <Check className="h-4 w-4 text-green-400" /> : <Copy className="h-4 w-4" />}
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>

          <ResultKeywords 
            keywords={seoContent.keywords} 
            copied={copied === 'keywords'}
            handleCopy={() => handleCopy(seoContent.keywords.join(', '), 'keywords')}
          />

          <ResultProductDescription 
            description={seoContent.productDescription}
            copied={copied === 'description'}
            handleCopy={() => handleCopy(seoContent.productDescription, 'description')}
          />

          <ResultFeatureSections 
            longTailKeywords={seoContent.longTailKeywords}
            productFeatures={seoContent.productFeatures}
            targetAudience={seoContent.targetAudience}
            seoRecommendations={seoContent.seoRecommendations}
          />

          <ResultCompetitorAnalysis analysis={seoContent.competitorAnalysis} />

          <ResultContentIdeas ideas={seoContent.contentIdeas} />
        </div>
      </ScrollArea>

      {/* Share Dialog */}
      <Dialog>
        <DialogTrigger asChild>
          <Button 
            variant="outline" 
            size="sm" 
            className="text-sm border-white/50 hover:border-white/70 hover:bg-indigo-900/80 transition-colors text-white rounded-lg fixed bottom-4 right-4 z-10"
          >
            <MessageSquare className="h-3 w-3 mr-1" />
            Share via WhatsApp
          </Button>
        </DialogTrigger>
        <DialogContent className="bg-gradient-to-br from-indigo-900/90 to-purple-900/90 border border-white/30 text-white backdrop-blur-xl">
          <DialogHeader>
            <DialogTitle className="text-xl font-bold text-white drop-shadow-md">
              Share SEO Content
            </DialogTitle>
            <DialogDescription className="text-white text-base">
              Send your generated SEO content via WhatsApp
            </DialogDescription>
          </DialogHeader>
          <div className="py-4">
            <div className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="phone" className="text-white text-base">Phone Number</Label>
                <div className="flex items-center gap-2">
                  <div className="p-2 bg-indigo-900/80 rounded-lg">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-4 w-4 text-white">
                      <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>
                    </svg>
                  </div>
                  <Input
                    id="phone"
                    placeholder="Enter phone number (e.g., 1234567890)"
                    value={phoneNumber}
                    onChange={(e) => onPhoneNumberChange(e.target.value)}
                    className="border-white/50 bg-indigo-950/80 text-white placeholder:text-white/70 text-base"
                  />
                </div>
                <p className="text-sm text-white">
                  Enter the phone number without country code (will be added automatically)
                </p>
              </div>
              
              {whatsAppSuccess !== null && (
                <div className={`p-3 rounded-lg ${whatsAppSuccess ? 'bg-green-900/80 border border-green-500/50' : 'bg-red-900/80 border border-red-500/50'}`}>
                  <p className="text-base font-medium text-white">
                    {whatsAppSuccess 
                      ? 'Message sent successfully!' 
                      : 'Failed to send message. Please check your WhatsApp credentials.'}
                  </p>
                </div>
              )}
            </div>
          </div>
          <DialogFooter>
            <Button 
              onClick={handleSendWhatsApp}
              disabled={isSendingWhatsApp || !phoneNumber.trim()}
              className="bg-gradient-to-r from-indigo-500 to-purple-500 hover:from-indigo-600 hover:to-purple-600 text-white text-base"
            >
              {isSendingWhatsApp ? <Loader2 className="h-4 w-4 animate-spin mr-2" /> : <MessageSquare className="h-4 w-4 mr-2" />}
              {isSendingWhatsApp ? 'Sending...' : 'Send via WhatsApp'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </motion.div>
  );
};

export default ResultsView;
